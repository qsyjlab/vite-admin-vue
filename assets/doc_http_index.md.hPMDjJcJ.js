import{_ as s,c as n,o as a,R as p}from"./chunks/framework.kGBdJdCt.js";const u=JSON.parse('{"title":"接口联调","description":"","frontmatter":{},"headers":[],"relativePath":"doc/http/index.md","filePath":"doc/http/index.md"}'),l={name:"doc/http/index.md"},o=p(`<h1 id="接口联调" tabindex="-1">接口联调 <a class="header-anchor" href="#接口联调" aria-label="Permalink to &quot;接口联调&quot;">​</a></h1><h2 id="开发环境配置" tabindex="-1">开发环境配置 <a class="header-anchor" href="#开发环境配置" aria-label="Permalink to &quot;开发环境配置&quot;">​</a></h2><p>项目启动时 vite 默认读取 <code>/env/.env</code> 下的环境变量</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># 信息</span></span>
<span class="line"><span style="color:#e1e4e8;">VITE_APP_TITLE= vite-admin-vue</span></span>
<span class="line"><span style="color:#e1e4e8;">VITE_APP_DESC= vite-admin-vue 是一个中后台管理系统模版</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;"># api路径</span></span>
<span class="line"><span style="color:#e1e4e8;">VITE_APP_API_BASE_URL = &quot;/&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 信息</span></span>
<span class="line"><span style="color:#24292e;">VITE_APP_TITLE= vite-admin-vue</span></span>
<span class="line"><span style="color:#24292e;">VITE_APP_DESC= vite-admin-vue 是一个中后台管理系统模版</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># api路径</span></span>
<span class="line"><span style="color:#24292e;">VITE_APP_API_BASE_URL = &quot;/&quot;</span></span></code></pre></div><p>最终结果会被保存到 <code>src/config/index.ts</code> 文件夹下。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">VITE_EVN</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  baseApiUrl: </span><span style="color:#79B8FF;">VITE_EVN</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">BASE_URL</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  projectTitle: </span><span style="color:#79B8FF;">VITE_EVN</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">VITE_APP_TITLE</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  projectDesc: </span><span style="color:#79B8FF;">VITE_EVN</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">VITE_APP_DESC</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  storagePrefix: </span><span style="color:#9ECBFF;">&#39;_BASIC_&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">VITE_EVN</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  baseApiUrl: </span><span style="color:#005CC5;">VITE_EVN</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">BASE_URL</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  projectTitle: </span><span style="color:#005CC5;">VITE_EVN</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">VITE_APP_TITLE</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  projectDesc: </span><span style="color:#005CC5;">VITE_EVN</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">VITE_APP_DESC</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  storagePrefix: </span><span style="color:#032F62;">&#39;_BASIC_&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>不同的环境根据不同的 mode 来指定不同的 <code>.env.mode</code></p><h2 id="接口请求" tabindex="-1">接口请求 <a class="header-anchor" href="#接口请求" aria-label="Permalink to &quot;接口请求&quot;">​</a></h2><ol><li>接口请求基于 <code>axios</code> 封装</li><li>本地测试环境，使用 <code>mock</code> 来模拟数据，禁止线上使用 <code>mock</code> 环境</li><li>接口统一定义 src/api 文件夹下</li><li>相关 api 的 ts 类型定义在 src/api/model 下，也可以直接放在 /src/model 中</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mockService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/service&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { RouteModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;~/mock/permission&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Result } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/service/types/result&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMenuList</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> mockService.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">RouteModule</span><span style="color:#E1E4E8;">&gt;&gt;({</span></span>
<span class="line"><span style="color:#E1E4E8;">    url: </span><span style="color:#9ECBFF;">&#39;/getMenuList&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    method: </span><span style="color:#9ECBFF;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { mockService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/service&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { RouteModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;~/mock/permission&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Result } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/service/types/result&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMenuList</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mockService.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">RouteModule</span><span style="color:#24292E;">&gt;&gt;({</span></span>
<span class="line"><span style="color:#24292E;">    url: </span><span style="color:#032F62;">&#39;/getMenuList&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    method: </span><span style="color:#032F62;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>这里只展示使用示例 单独 在下一篇章解释具体的工作逻辑</p></blockquote>`,11),e=[o];function t(c,r,E,i,y,d){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{u as __pageData,F as default};
