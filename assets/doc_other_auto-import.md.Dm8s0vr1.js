import{_ as s,c as i,o as e,aR as a}from"./chunks/framework.DHfpg7u7.js";const E=JSON.parse('{"title":"自动导入插件","description":"","frontmatter":{},"headers":[],"relativePath":"doc/other/auto-import.md","filePath":"doc/other/auto-import.md"}'),n={name:"doc/other/auto-import.md"},t=a(`<h1 id="自动导入插件" tabindex="-1">自动导入插件 <a class="header-anchor" href="#自动导入插件" aria-label="Permalink to &quot;自动导入插件&quot;">​</a></h1><p>下面讲讲关于自动导入插件相关的问题。</p><h2 id="unplugin-vue-components" tabindex="-1">unplugin-vue-components <a class="header-anchor" href="#unplugin-vue-components" aria-label="Permalink to &quot;unplugin-vue-components&quot;">​</a></h2><p>这个插件的作用实际是帮你 import 组件。相关样式会根据插件来传入的 <code>resolver</code> 接处理样式的引入。</p><p>例如</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会自动帮你添加这样的 import, 根据 resolver 的不同可能会引入一些样式等 import 语句</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ElButton } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意： 以上仅仅只是帮你自动引入， 在 <code>vue</code> appContext 上下文 中并没有被全局注册这会使得动态组件 <code>component :is</code> 写法失效。因为 component 组件是通过 <code>resolveComponent</code> api 来处理组件。回依次 找当前实例的注册组件，以及 appContext 上下文中的组件。所以部分需要在全局组件挂在的组件需要自己手动注册。</p><p>但问题也不止这些，一些以 api 方式调用的组件需要自己导入相关样式。但这应该和 <code>element-plus</code> 的 <code>resovler</code> 有些关系。</p><p>以上是 <code>0.1x.x</code> 版本的问题，虽然目前是 <code>0.2x.x</code>版本，但是 最新版本的插件 仍有在这以上的问题。</p><p>在 1x 的 版本中重复导入是会重复处理 这使得 import 语句重复仍然会导入这个组件，但是 2x 中这个东西得到了去重也就是说 自己导入的东西则不再处理，出现样式丢失的问题。这个问题 可以自己手动导入相关的样式，也可以 <code>unplugin-element-plus</code> 这个插件来进行弥补。</p><h2 id="unplugin-auto-import" tabindex="-1">unplugin-auto-import <a class="header-anchor" href="#unplugin-auto-import" aria-label="Permalink to &quot;unplugin-auto-import&quot;">​</a></h2><p>插件做到的的自动导入实际和 <code>unplugin-vue-components</code> 的机制类似。可以导入一些 库的 api，不用写引入文件等。</p><p>但是缺点是容易造成项目混乱，除非你的项目组有绝对的编码规范，以及统一的配置，否则不建议使用。</p><p>这个插件并不会对你的项目提升太多的项目 ，可能还会对你的项目添加上手难度。即便是 有 ts 类型的支持</p><h2 id="unplugin-element-plus" tabindex="-1">unplugin-element-plus <a class="header-anchor" href="#unplugin-element-plus" aria-label="Permalink to &quot;unplugin-element-plus&quot;">​</a></h2><p>这个插件做到的事实际 unplugin-vue-components 和这个插件类似。实际感觉是 和 <code>unplugin-vue-components</code> <code>ElementPlusResolver</code> 基本差不多的原理，但是并不会因为你的导入而影响了插件的导入逻辑。可以配合 <code>unplugin-vue-components</code> 共同使用弥补样式导入的问题。</p><p>仍然是全局组件问题。</p>`,17),p=[t];function l(o,h,r,d,c,u){return e(),i("div",null,p)}const g=s(n,[["render",l]]);export{E as __pageData,g as default};
